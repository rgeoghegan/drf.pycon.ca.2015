!!! html
%html
  %head
    %meta{:charset => "utf-8"}
    %title Django Rest Framework: The Good & The Bad
    - include_css "css/reveal.css"
    - include_css "css/theme/beige.css"
    - include_css "lib/css/zenburn.css"

    - include_css "lib/font/league-gothic/league-gothic.css"
  %body
    .reveal
      .slides
        %section
          %h1 Django Rest Framework: The Good & The Bad
          %h2 Jordi Guti√©rrez Hermoso
          %h2 & Rory Geoghegan

        %section
          %h2 What is REST?
          %p <strong>RE</strong>presentational <strong>S</strong>tate <strong>T</strong>ransfer

        %section
          %h2 First, an example

        %section
          %h2 Photoshare.com!
          %ul
            %li.fragment You can upload photos
            %li.fragment You can view your photos
            %li.fragment You can share a photo with your friend(s)

        %section
          %h2 How would you do it in a SOAP/RPC way?

          %ul.fragment
            %li
              %code POST /addphoto
            %li
              %code POST /deletephoto?id=1234
            %li
              %code GET /listphotos?user=555
            %li
              %code GET /showphoto?id=1234
            %li
              %code POST /sharephoto?to_user=444
            %li
              %code POST /resizephoto?width=400&height=200

        %section
          %p Roy Thomas Fielding
          %p
            %a{:href=>"http://www.ics.uci.edu/~fielding/pubs/dissertation/top.htm"} Architectural Styles and the Design of Network-based Software Architectures (2000)

        %section
          %section
            %h2 How would it look in REST?
            %p
              %code GET /photos
            %p.fragment
              %pre
                %code
                  :preserve
                    200 OK

                    [
                      {
                        "id": 1234,
                        "title": "My Photo",
                        "url": "/photos/1234/"
                        "photo_file": "/media/my_photo.jpg",
                        ...
                      },
                      ...
                    ]

          %section
            %h2 How would it look in REST?
            %p
              %code POST /photos
            %p.fragment
              %pre
                %code
                  :preserve
                    201 Created

                    {
                      "id": 1235,
                      "title": "Photo #2",
                      "url": "/photos/1235/"
                      "photo_file": "/media/second_photo.jpg",
                      ...
                    }
          %section
            %h2 How would it look in REST?
            %p
              %code GET /photos/1235/
            %p.fragment
              %pre
                %code
                  :preserve
                    200 OK

                    {
                      "id": 1235,
                      "title": "Photo #2",
                      "url": "/photos/1235/"
                      "photo_file": "/media/second_photo.jpg",
                      ...
                    }

          %section
            %h2 How would it look in REST?
            %p
              %code PUT /photos/1235/
            %p.fragment
              %pre
                %code
                  :preserve
                    200 OK

                    {
                      "id": 1235,
                      "title": "Photo number 2",
                      "url": "/photos/1235/"
                      "photo_file": "/media/second_photo.jpg",
                      ...
                    }

          %section
            %h2 How would it look in REST?
            %p
              %code DELETE /photos/1235/
            %p.fragment
              %pre
                %code
                  :preserve
                    204 No Content

          %section
            %h2 How would it look in REST?
            %p
              %code GET /photos/1234/sharing
            %p.fragment
              %pre
                %code
                  :preserve
                    200 OK

                    [
                      "Jordi",
                      "Rory"
                    ]

          %section
            %h2 How would it look in REST?
            %p
              %code PUT /photos/1234/sharing
            %p.fragment
              %pre
                %code
                  :preserve
                    200 OK

                    [
                      "Rory"
                    ]

        %section
          %h2 What does this have to do with Django?
          .fragment Writing good REST APIs with Django is hard, but the Django REST Framework (DRF) makes it easy!

        %section
          %h2 PSA: don't do this:
          %pre
            %code.python
              :preserve
                def myrestview(request):
                    # Manually loading and validating JSON
                    data = json.loads(request.POST)
                    photo = Photo.objects.get(id=data["photo_id"])

        %section
          %h2 How to properly do it
          %img{:src => "django_views.png"}

        %section
          %h2 How to properly do it
          %img{:src => "drf_views.png"}

        %section
          %h2 Our Photo Model
          %pre
            %code.python
              :preserve
                class Photo(models.Model):
                    title = models.CharField()
                    photo = models.FileField()
                    user = models.ForeignKey('PhotoUser')
                    viewers = models.ManyToManyField(
                        'PhotoUser', related_name='can_view', blank=True
                    )

        %section
          %h2 The Views
          %pre
            %code.python
              :preserve
                class PhotoSerializer(ModelSerializer):
                    class Meta:
                        model = Photo

                class PhotoView(RetrieveUpdateDestroyAPIView):
                    serializer_class = PhotoSerializer
                    queryset = Photo.objects.all()

        %section
          %h2
            %a{:href => "http://localhost:8000/photo/1/"} Live Demo!
          %img{:src => "photo_get.png"}

        %section
          %h2 Form Options
          -#%img{:src => "photo_options.png"}
          %pre
            %code.json
              :preserve
                HTTP 200 OK
                Content-Type: application/json
                Vary: Accept
                Allow: GET, PUT, PATCH, DELETE, HEAD, OPTIONS

                {
                    "name": "Photo",
                    "description": "",
                    "renders": [
                        "application/json",
                        "text/html"
                    ],
                    "parses": [
                        "application/json",
                        "application/x-www-form-urlencoded",
                        "multipart/form-data"
                    ],
                    "actions": {
                        "PUT": {
                            "id": {
                                "type": "integer",
                                "required": false,
                                "read_only": true,
                                "label": "ID"
                            },
                            "title": {
                                "type": "string",
                                "required": true,
                                "read_only": false,
                                "label": "Title",
                                "max_length": 200
                            },
                            "photo": {
                                "type": "file upload",
                                "required": true,
                                "read_only": false,
                                "label": "Photo"
                            },
                            "user": {
                                "type": "field",
                                "required": true,
                                "read_only": false,
                                "label": "User",
                                "choices": [
                                    {
                                        "display_name": "Rory",
                                        "value": "1"
                                    },
                                    {
                                        "display_name": "Jordi",
                                        "value": "2"
                                    }
                                ]
                            },
                            "viewers": {
                                "type": "field",
                                "required": false,
                                "read_only": false,
                                "label": "Viewers",
                                "choices": [
                                    {
                                        "display_name": "Rory",
                                        "value": "1"
                                    },
                                    {
                                        "display_name": "Jordi",
                                        "value": "2"
                                    }
                                ]
                            }
                        }
                    }
                }

        %section
          %h2 A few problems we encountered with DRF

        %section
          %h2 The fields situation
          .fragment
            %p
              Static fields (as class properties)
              %pre
                %code.python
                  :preserve
                    class UserSerializer(serializers.Serializer):
                        email = serializers.EmailField()
                        name = serializers.CharField()
            .fragment
              %p Dynamic fields (overriding fields property)
              %pre
                %code.python
                  :preserve
                    class UserSerializer(serializers.Serializer):

                        @property
                        def fields(self):
                            return {
                                "email": serializers.EmailField(),
                                "name": serializers.CharField()
                            }

        %section
          %h2 The fields situation
          %p Dynamic fields now also require you to do all this other stuff
          %pre
            %code.python
              :preserve
                class UserSerializer(serializers.Serializer):

                    @property
                    def fields(self):
                        fields = get_fields(self)

                    def get_fields(self):
                        if self.instance:
                            # ... figure out how to get the fields here
                        else:
                            # good luck trying to fetch the fields!


        %section
          %h2  Hierarchy of resources
          %p For example, <code>/album/42/photo/1234</code>

        %section
          %h2 Hierarchy of resources
          %p This requires constantly manually fetching the containing resource
          %pre
            %code.python
              :preserve
                class PhotoView(RetrieveUpdateDestroyAPIView):

                    def get_object(self):

                        # not DRY
                        album = get_object_or_404(
                            Albums.objects.all(),
                            pk=self.kwargs['album_id']
                        )

                        # Manually check it's there
                        photo = get_objects_or_404(
                             album.photo_set.all(),
                             pk=self.kwargs['photo_id']
                        )

                        return photo

        %section
          %h2 Contextualising resources
          %p back to this <code>OPTION /album/42/</code>
          %pre
            %code.json
              :preserve
                {
                    ...
                    "actions": {
                        "PUT": {
                            ...
                            "viewers": {
                                ...
                                "choices": [
                                    {
                                        "display_name": "Rory",
                                        "value": "1"
                                    },
                                    {
                                        "display_name": "Jordi",
                                        "value": "2"
                                    },
                                    {
                                        "display_name": "Bob",
                                        "value": "3"
                                    },
                                    {
                                        "display_name": "Alice",
                                        "value": "4"
                                    }
                                ]
                            }
                        }
                    }
                }

        %section
          %h2 Thanks

    - include_js "lib/js/head.min.js"
    - include_js "js/reveal.js"
    - include_js "init.js"
