!!! html
%html
  %head
    %meta{:charset => "utf-8"}
    %title Django Rest Framework: The Good & The Bad
    - include_css "css/reveal.css"
    - include_css "css/theme/beige.css"
    - include_css "css/print/paper.css"
    - include_css "css/print/pdf.css"
    - include_css "lib/css/zenburn.css"

    - include_css "lib/font/league-gothic/league-gothic.css"
  %body
    .reveal
      .slides
        %section
          %h1 Django Rest Framework: The Good & The Bad
          %h2 Jordi Guti√©rrez Hermoso
          %h2 & Rory Geoghegan

        %section
          %h2 What is REST?
          %p <strong>RE</strong>presentational <strong>S</strong>tate <strong>T</strong>ransfer

        %section
          %h2 First, an example

        %section
          %h2 Photoshare.com!
          .fragment
            %p Users:
            %p Jordi
            %p Rory

        %section
          %h2 Each user has photos

        %section
          %h2 You can share a photo with your friend(s)

        %section
          %h2 How would you do it in a SOAP/RPC way?

          %ul
            %li
              %code POST /addphoto
            %li
              %code POST /deletephoto?id=1234
            %li
              %code GET /listphotos?user=555
            %li
              %code GET /showphoto?id=1234
            %li
              %code POST /sharephoto?to_user=444
            %li
              %code POST /resizephoto?width=400&height=200

        %section
          %p Roy Thomas Fielding
          %p
            %a{:href=>"http://www.ics.uci.edu/~fielding/pubs/dissertation/top.htm"} Architectural Styles and the Design of Network-based Software Architectures (2000)

        %section
          %section
            %h2 How would it look in REST?
            %p
              %code GET /photos
            %p.fragment
              %pre
                %code
                  :preserve
                    200 OK

                    [
                      {
                        "id": 1234,
                        "title": "My Photo",
                        "url": "/photos/1234/"
                        "photo_file": "/media/my_photo.jpg",
                        ...
                      },
                      ...
                    ]

          %section
            %h2 How would it look in REST?
            %p
              %code POST /photos
            %p.fragment
              %pre
                %code
                  :preserve
                    201 Created

                    {
                      "id": 1235,
                      "title": "Photo #2",
                      "url": "/photos/1235/"
                      "photo_file": "/media/second_photo.jpg",
                      ...
                    }
          %section
            %h2 How would it look in REST?
            %p
              %code GET /photos/1235/
            %p.fragment
              %pre
                %code
                  :preserve
                    200 OK

                    {
                      "id": 1235,
                      "title": "Photo #2",
                      "url": "/photos/1235/"
                      "photo_file": "/media/second_photo.jpg",
                      ...
                    }

          %section
            %h2 How would it look in REST?
            %p
              %code PUT /photos/1235/
            %p.fragment
              %pre
                %code
                  :preserve
                    200 OK

                    {
                      "id": 1235,
                      "title": "Photo number 2",
                      "url": "/photos/1235/"
                      "photo_file": "/media/second_photo.jpg",
                      ...
                    }

          %section
            %h2 How would it look in REST?
            %p
              %code DELETE /photos/1235/
            %p.fragment
              %pre
                %code
                  :preserve
                    204 No Content

          %section
            %h2 How would it look in REST?
            %p
              %code GET /photos/1234/sharing
            %p.fragment
              %pre
                %code
                  :preserve
                    200 OK

                    [
                      "Jordi",
                      "Rory"
                    ]

          %section
            %h2 How would it look in REST?
            %p
              %code PUT /photos/1234/sharing
            %p.fragment
              %pre
                %code
                  :preserve
                    200 OK

                    [
                      "Rory"
                    ]

        %section
          %h2 What does this have to do with Django?
          .fragment Writing good REST APIs with Django is hard, but the Django REST Framework (DRF) makes it easy!

        %section
          %h2 PSA: don't do this:
          %pre
            %code.python
              :preserve
                def myrestview(request):
                    # Manually loading and validating JSON
                    data = json.loads(request.POST)
                    photo = Photo.objects.get(id=data["photo_id"])

        %section
          %h2 How to properly do it
          %img{:src => "django_views.png"}

        %section
          %h2 How to properly do it
          %img{:src => "drf_views.png"}

        %section
          %h2 Our Photo Model
          %pre
            %code.python
              :preserve
                class Photo(models.Model):
                    title = models.CharField()
                    photo = models.FileField()
                    user = models.ForeignKey('PhotoUser')
                    viewers = models.ManyToManyField(
                        'PhotoUser', related_name='can_view', blank=True
                    )

        %section
          %h2 The Views
          %pre
            %code.python
              :preserve
                class PhotoSerializer(ModelSerializer):
                    class Meta:
                        model = Photo

                class PhotoView(RetrieveUpdateDestroyAPIView):
                    serializer_class = PhotoSerializer
                    queryset = Photo.objects.all()

        %section
          %h2
            %a{:href => "http://localhost:8000/photo/1/"} Live Demo!
          %img{:src => "photo_get.png"}

        %section
          %h2 Form Options
          %img{:src => "photo_options.png"}

        %section
          %h2 A few problems we encountered with DRF
          %ul
            %li.fragment Dynamic fields kind of subvert the framework
            %li.fragment Nested resources are awkward
            %ul
              %li.fragment Gotta manually link child to parent
              %li.fragment Messes badly with dynamic fields

        %section
          %p
            Static fields (as class properties)
            %pre
              %code.python
                :preserve
                  class UserSerializer(serializers.Serializer):
                      email = serializers.EmailField()
                      name = serializers.CharField()
          .fragment
            %p Dynamic fields (overriding fields property)
            %pre
              %code.python
                :preserve
                  class UserSerializer(serializers.Serializer):

                      @property
                      def fields(self):
                          return {
                              "email": serializers.EmailField(),
                              "name": serializers.CharField()
                          }

    - include_js "lib/js/head.min.js"
    - include_js "js/reveal.js"
    - include_js "init.js"
